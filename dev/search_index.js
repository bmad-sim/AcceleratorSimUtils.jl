var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimUtils","category":"page"},{"location":"#SimUtils","page":"Home","title":"SimUtils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimUtils.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SimUtils]","category":"page"},{"location":"#SimUtils.Quaternion","page":"Home","title":"SimUtils.Quaternion","text":"Quaternion{T <: Number}\n\nLightweight quaternion implementation for simulations.\n\n\n\n\n\n","category":"type"},{"location":"#SimUtils.cos_one","page":"Home","title":"SimUtils.cos_one","text":"cos_one(x)\n\nFunction to calculate cos(x) - 1 to machine precision. This is usful if angle can be near zero where the direct evaluation of cos(x) - 1 is inaccurate.\n\n\n\n\n\n","category":"function"},{"location":"#SimUtils.gen_pinknoise","page":"Home","title":"SimUtils.gen_pinknoise","text":"function gen_pinknoise(   beta::Float64=1.0,   size::Int64=2^12,   dt::Float64=1.0,   f0::Float64=1.0 )\n\ndescription:\n> this function generates pink noise with frequency rolloff coefficient 'beta'\n\npositional parameter:\nbeta             -- type:Float64, frequency rolloff coefficient\nsize             -- type:Int64, number of points\nkeyword parameter:\ndt               -- type:Float64, the difference of between each data, total time = size * dt, unit: s\nf0               -- type:Float64, the spectrum has the shape (f0/f)^(beta), unit: Hz\n\nNote: \nthe algorithm is based on \n\"Timmer, J. and Koenig, M.: On generating power law noise. Astron. Astrophys. 300, 707-710 (1995)\"\n\n\n\n\n\n","category":"function"},{"location":"#SimUtils.modulo2","page":"Home","title":"SimUtils.modulo2","text":"function modulo2(x, amp)\n\nFunction to return\n\n     mod2 = x + 2 * n * amp\n\nwhere n is an integer chosen such that\n\n    -amp <= mod2 < amp\n\n\n\n\n\n","category":"function"},{"location":"#SimUtils.mul!-Union{Tuple{T}, Tuple{S}, Tuple{Quaternion, Quaternion{S}, Quaternion{T}}} where {S, T}","page":"Home","title":"SimUtils.mul!","text":"mul!(Q3::Quaternion, Q1::Quaternion{S}, Q2::Quaternion{T}) where {S,T}\n\nMultiplies the quaternions Q1*Q2 and stores the result in-place in Q3.  Aliasing of all three arguments is allowed.\n\n\n\n\n\n","category":"method"}]
}
