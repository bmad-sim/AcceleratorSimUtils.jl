var documenterSearchIndex = {"docs":
[{"location":"#AcceleratorSimUtils","page":"Home","title":"AcceleratorSimUtils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AcceleratorSimUtils.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#AcceleratorSimUtils.calc_1β","page":"Home","title":"AcceleratorSimUtils.calc_1β","text":"calc_1β(mass; E_tot = nothing, pc = nothing, E_kinetic = nothing, γ = nothing) -> 1-β\ncalc_1β(species; E_tot = nothing, pc = nothing, E_kinetic = nothing, γ = nothing) -> 1-β\n\nReturns the quantity 1 - β = 1 - v/c of a particle given one of E_tot (total energy),  pc (momentum*c), E_kinetic (kinetic energy), or γ (relativistic factor).  In the high energy limit, this is approximately 1/(2γ^2). calc_1β is computed such that in the high energy limit, round off error is not a problem.\n\nOne and only one of the optional arguments E_tot, pc, E_kinetic, or γ should be set. All arguments are Numbers except species which is of type Species. The mass argument is in units of energy/c^2.\n\nAlso see the functions calc_E_tot; calc_pc, calc_β, calc_E_kinetic, and calc_γ\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.calc_E_kinetic","page":"Home","title":"AcceleratorSimUtils.calc_E_kinetic","text":"calc_E_kinetic(mass; E_tot = nothing, pc = nothing, β = nothing, γ = nothing) -> E_kinetic\ncalc_E_kinetic(species; E_tot = nothing, pc = nothing, β = nothing, γ = nothing) -> E_kinetic\n\nReturns the kinetic energy of a particle in eV given one of E_tot (total energy),  pc (momentum*c), β (velocity/c), or γ (relativistic factor). One and only one of the optional arguments E_tot, pc, β, or γ should be set.\n\nAll arguments are Numbers except species which is of type Species. The mass argument is in units of energy/c^2.\n\nAlso see the functions  calc_E_tot; calc_pc, calc_β, calc_β1, and calc_γ\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.calc_E_tot","page":"Home","title":"AcceleratorSimUtils.calc_E_tot","text":"calc_E_tot(mass; pc = nothing, β = nothing, E_kinetic = nothing, γ = nothing) -> E_tot\ncalc_E_tot(species; pc = nothing, β = nothing, E_kinetic = nothing, γ = nothing) -> E_tot\n\nReturns the total energy of a particle (in eV) given one of pc (momentum*c), β (velocity/c),  E_kinetic (kinetic energy), or γ (relativistic factor). One and only one of the optional arguments pc, β, E_kinetic, or γ should be set. All arguments are Numbers except species which is of type Species.\n\nThe mass argument is in units of energy/c^2.\n\nAlso see the functions calc_pc, calc_β, calc_β1, calc_E_kinetic, and calc_γ\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.calc_changed_energy","page":"Home","title":"AcceleratorSimUtils.calc_changed_energy","text":"calc_changed_energy(mass; old_pc, dE) -> (pc, E_tot)\ncalc_changed_energy(species::Species; old_pc, dE) -> (pc, E_tot)\n\nGiven an initial old_pc particle momentum*c, and a change in energy dE, calculate the final momentum*c and total energy. If dE is too large and negative for there to be a solution, nothing, nothing is returned. All arguments are Numbers except species which is of type Species.\n\nThe mass argument is in units of energy/c^2.\n\nThe calculation is done in such a way as to not loose precision.\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.calc_pc","page":"Home","title":"AcceleratorSimUtils.calc_pc","text":"calc_pc(mass; E_tot = nothing, β = nothing, E_kinetic = nothing, γ = nothing) -> pc\ncalc_pc(species; E_tot = nothing, β = nothing, E_kinetic = nothing, γ = nothing) -> pc\n\nReturns the particle momentum*c (in eV) given one of E_tot (total energy), β (velocity/c),  E_kinetic (kinetic energy), or γ (relativistic factor).  One and only one of the optional arguments E_tot, β, E_kinetic, or γ should be set. All arguments are Numbers except species which is of type Species.\n\nThe mass argument is in units of energy/c^2.\n\nAlso see the functions calc_E_tot, calc_β, calc_β1, calc_E_kinetic, and calc_γ\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.calc_β","page":"Home","title":"AcceleratorSimUtils.calc_β","text":"calc_β(mass; E_tot = nothing, pc = nothing, E_kinetic = nothing, γ = nothing) -> β\ncalc_β(species; E_tot = nothing, pc = nothing, E_kinetic = nothing, γ = nothing) -> β\n\nReturns the normalized velocity β = v/c of a particle given one of E_tot (total energy),  pc (momentum*c), E_kinetic (kinetic energy), or γ (relativistic factor).  One and only one of the optional arguments E_tot, pc, E_kinetic, or γ should be set. All arguments are Numbers except species which is of type Species.\n\nThe mass argument is in units of energy/c^2.\n\nAlso see the functions calc_E_tot, calc_pc, calc_β1, calc_E_kinetic, and calc_γ\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.calc_γ","page":"Home","title":"AcceleratorSimUtils.calc_γ","text":"calc_γ(mass; E_tot = nothing, pc = nothing, β = nothing, E_kinetic = nothing) -> γ\ncalc_γ(species; E_tot = nothing, pc = nothing, β = nothing, E_kinetic = nothing) -> γ\n\nReturns the relativistic gamma factor of a particle given E_tot (total energy),  pc (momentum*c), β (velocity/c), or E_kinetic (kinetic energy).  One and only one of the optional arguments E_tot, pc, β, or E_kinetic should be set.\n\nAll arguments are Numbers except species which is of type Species. The mass argument is in units of energy/c^2.\n\nAlso see the functions calc_pc, calc_β, calc_β1, calc_E_kinetic, and calc_γ\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.coscu","page":"Home","title":"AcceleratorSimUtils.coscu","text":"coscu(x, nd::Int = 0)\n\nReturns, to machine precision, the ndth derivative of (1 - cos(x)) / x^2. If nd = 0, returns the function itself.\n\nNote: Currently, only nd = 0 or 1 are implemented\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.gen_pinknoise","page":"Home","title":"AcceleratorSimUtils.gen_pinknoise","text":"function gen_pinknoise(     beta::Float64=1.0, size::Int64=2^12, dt::Float64=1.0, f0::Float64=1.0)\n\nRandom number generator that has a \"pink noise\" spectrum with frequency rolloff coefficient beta.\n\npositional parameter:\n\nbeta             – type:Float64, frequency rolloff coefficient \n\nsize             – type:Int64, number of points \n\n\nkeyword parameters:\n\ndt               – type:Float64, the difference of between each data, total time = size * dt, unit: s \n\nf0               – type:Float64, the spectrum has the shape (f0/f)^(beta), unit: Hz. \n\n\nNote: The algorithm is based on      \"Timmer, J. and Koenig, M.: On generating power law noise. Astron. Astrophys. 300, 707-710 (1995)\"\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.modulo2","page":"Home","title":"AcceleratorSimUtils.modulo2","text":" modulo2(x, amp)\n\nFunction to return\n\n     mod2 = x + 2 * n * amp\n\nwhere n is an integer chosen such that\n\n    -amp <= mod2 < amp\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.one_cos","page":"Home","title":"AcceleratorSimUtils.one_cos","text":"one_cos(x)\n\nFunction to calculate 1 - cos(x) to machine precision. This is usful if angle can be near zero where the direct evaluation of 1 - cos(x) is inaccurate.\n\n\n\n\n\n","category":"function"},{"location":"#AcceleratorSimUtils.sincu-Tuple{Any}","page":"Home","title":"AcceleratorSimUtils.sincu","text":"sincu(z, nd::Int = 0)\n\nReturns the unnormalized sinc(z) (equal to sin(z)/z, no factors of pi here) for nd = 0 or the ndth derivative for nd > 0.\n\nNote: Currently, only nd = 0 or 1 are implemented\n\n\n\n\n\n","category":"method"},{"location":"#AcceleratorSimUtils.sqrt_one","page":"Home","title":"AcceleratorSimUtils.sqrt_one","text":"sqrt_one(x)\n\nCalculate sqrt(1+x) - 1 to machine precision.\n\n\n\n\n\n","category":"function"}]
}
